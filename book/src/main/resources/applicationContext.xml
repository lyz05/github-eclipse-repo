<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- spring的配置文件，这里主要配置和业务逻辑有关的 -->
	<!-- spring是一个容器，需要在Spring中注册组件，才能让容器来管理和分配组件 -->
	<!-- 扫描Spring标签中的组件，base-package：指定扫描的基础包，将基础包中所有加了注解的类扫描进IOC -->
	<context:component-scan base-package="cc.home999.book">
		<!-- 指定排除规则，按照注解进行排除 -->
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
	
	
	<!-- ======================数据源，事务控制===================== -->
	<!-- 加载外部配置文件 -->
	<context:property-placeholder location="classpath:dbconfig.properties"/>
	<!-- 创建c3p0连接池 -->
	<bean id="pooledDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<!-- 使用Property标签为ComboPooledDataSource对象的属性赋值 -->
		<property name="jdbcUrl" value="${jdbc.jdbcUrl}"/>
		<property name="driverClass" value="${jdbc.driverClass}"/>
		<property name="user" value="#{systemEnvironment['MYSQL_USER']}"/>
		<property name="password" value="#{systemEnvironment['MYSQL_PASS']}"/>
	</bean>

	<!-- =================配置和Mybatis的整合=========================== -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 指定mybatis全局配置文件的位置 -->
		<property name="configLocation" value="classpath:mybatis-config.xml"/>
		<property name="dataSource" ref="pooledDataSource"/>
		<property name="mapperLocations" value="classpath:mapper/*.xml"/>
	</bean>
	
	<!-- 配置扫描器，将mybatis接口的实现加入到ioc容器中 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
	<!-- 扫描所有DAO接口的实现加入到ioc容器中 -->
		<property name="basePackage" value="cc.home999.book.dao"/>
	</bean>
	<!-- 配置一个可以执行单个语句的sqlSession -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"/>
		<constructor-arg name="executorType" value="SIMPLE"/>
	</bean>
	<!-- ================================================================== -->
	
	<!-- ==============事务控制的配置============== -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<!-- 控制住数据源 -->
		<property name="dataSource" ref="pooledDataSource"/>
	</bean>
	<!-- 开启基于注解的事务 使用xml配置形式的事务（必要主要的都是使用配置式） -->
	<aop:config>
		<!-- 切入点表达式 -->
		<aop:pointcut expression="execution(* cc.home999.book.service..*(..))" id="txPoint"/>
		<!-- 配置事务增强 -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPoint"/>
	</aop:config>
	
	<!-- 配置事务增强，事务如何切入 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- 所有方法都是事务方法 -->
			<tx:method name="*"/>
			<!-- 以get所有的方法 -->
			<tx:method name="get*" read-only="true" />
		</tx:attributes>
	</tx:advice>
	
	<!-- Spring配置文件的核心点（数据源，与mybatis的结合，事务控制） -->
</beans>
